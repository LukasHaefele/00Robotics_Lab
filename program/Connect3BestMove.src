DEF Connect3BestMove (board[,]:OUT, bestCol:OUT, player:IN)
   DECL FIELD board[6,4]
   DECL INT bestCol
   DECL INT col, score, bestScore
   DECL FIELD tempBoard[6,4]
   DECL BOOL is_playable
   DECL enum_player player

   bestScore = -9999
   bestCol = 1

   FOR col = 1 TO 4
      IsColumnPlayable(board[,], col, is_playable)
      IF is_playable THEN
         CopyBoard(board[,], tempBoard[,])
         ApplyMove(tempBoard[,], col, player) ; Robot is player 1
         EvaluateBoard(tempBoard[,], score)
         IF(score > bestScore)THEN
            bestScore = score
            bestCol = col
         ENDIF
      ENDIF
  ENDFOR

END

; Checks if the column has empty space to play
DEF IsColumnPlayable (board[,]:OUT, col:IN, is_playable:OUT)
   DECL FIELD board[,]
   DECL INT col
   DECL BOOL is_playable
   SWITCH board[6,col].player
      CASE #free
         is_playable = TRUE
      CASE #p1, #p2
         is_playable = FALSE
   ENDSWITCH
END

; Copies board array
DEF CopyBoard (src:IN, dst:OUT)
   DECL FIELD src[,]
   DECL FIELD dst[,]
   DECL INT i, j
   FOR i = 1 TO 6
      FOR j = 1 TO 4
         dst[i,j] = src[i,j]
      ENDFOR
   ENDFOR
END

; Apply move for player (1 or 2) in column col
DEF ApplyMove (board[,]:OUT, col:IN, player:IN)
   DECL FIELD board[,]
   DECL INT col, row
   DECL enum_player player

   FOR row = 1 TO 6
      SWITCH board[row,col].player
         CASE #free
            board[row,col].player = player
            RETURN
         DEFAULT
      ENDSWITCH
  ENDFOR
END

; Evaluates board for player 1 (robot)
DEF EvaluateBoard (board[,]:IN, score:OUT)
   DECL FIELD board[,]
   DECL INT score
   DECL BOOL is_win
   
   ; Simple evaluation: +1000 if robot wins, -1000 if opponent wins, else 0
   
   CheckWin(board, #p1, is_win)
   IF is_win THEN
      score = 1000
   ENDIF
   CheckWin(board, #p2, is_win)
   IF is_win THEN
      score = -1000
   ENDIF
END

; Checks if player has a winning 3 in a row on the board
DEF CheckWin (board:IN, player:IN, is_win:OUT)
   DECL FIELD board[,]
   DECL enum_player player
   DECL INT i, j
   DECL BOOL is_win
   
   ; Horizontal
   FOR i = 1 TO 6
      FOR j = 1 TO 2
         IF (board[i,j].player == player) AND (board[i,j+1].player == player) AND (board[i,j+2].player == player) THEN
            is_win = TRUE
            RETURN
         ENDIF
      ENDFOR
   ENDFOR

   ; Vertical
   FOR i = 1 TO 4
      FOR j = 1 TO 4
        IF (board[i,j].player == player) AND (board[i+1,j].player == player) AND (board[i+2,j].player == player) THEN
           is_win = TRUE
           RETURN
        ENDIF
      ENDFOR
   ENDFOR

   ; Diagonal down-right
   FOR i = 1 TO 4
      FOR j = 1 TO 2
         IF (board[i,j].player == player) AND (board[i+1,j+1].player == player) AND (board[i+2,j+2].player == player) THEN
            is_win = TRUE
            RETURN
         ENDIF
      ENDFOR
   ENDFOR

   ; Diagonal up-right
   FOR i = 3 TO 6
      FOR j = 1 TO 2
         IF (board[i,j].player == player) AND (board[i-1,j+1].player == player) AND (board[i-2,j+2].player == player) THEN
            is_win = TRUE
            RETURN
         ENDIF
      ENDFOR
   ENDFOR
      is_win = FALSE
   RETURN
END
